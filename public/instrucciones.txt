Recursos:
1. Página oficial:        https://nodejs.org/es
2. Glosario de versiones: https://nodejs.org/download/release/
3. Documentación oficial: https://nodejs.org/docs/latest-v18.x/api/documentation.html#about-this-documentation
4. Documentación API:     https://nodejs.dev/en/api/v18/documentation/

Extensiones VSC:
1. Javascript (ES6) code snippets: acelera el desarrollo a través de atajos para crear código de uso indispensable como:
    * fre: crea la estructura de foreach
    * imp: crea la estructura de import ES6
    * req: crea la estructura require CommonJS
    * mde: crea la estructura module.exports = {} CommonJS
    * nfn: crea la estructura de una constante igualda a una función de flecha
    * anfn: crea la estructura de una función anónima
2. Node extension pack: es un bundle con todo lo necesario para trabajar con nodejs

Primeros pasos:
1. Instalar nodejs
2. Crear un directorio para el proyecto
3. Nodejs básicamente es Javascript del lado del servidor, así que se crea un app.js para trabajar
4. Se siguen las mismas instrucciones que Javascript vanilla, pero para ejecutar la app se hace con la consola: node app.js
5. A diferencia de Javascript vanilla export e import ES6 en Nodejs se usa module.exports y require CommonJS
6. NPM y package.json. Son el Node Package Manager o manejador de paquetes para dotar nuestro proyecto de funciones ya creadas
y el package.json sirve para llevar el control de versiones y dependencias del proyecto, también sirve para la distribución, de
ese modo no se necesita pasar la carpeta node_modules y al usar npm install node sabrá que dependencias instalar.

Crear un proyecto con NPM:
1. Crear un directorio donde se almacenará
2. Crear el package.json
    2.1. Iniciar el proyecto: npm init
    2.2. Darle nombre al proyecto (dará como sugerencia el directorio raíz), convención slug mi-app
    2.3. Darle la versión al proyecto (dará como sugerencia 1.0.0), para el correcto versionado se usa 0.1.0
    2.4. Descripción del proyecto, el propósito del proyecto
    2.5. Punto de entrada, es decir, el primer archivo donde inicia el proyecto (index.js o app.js) por convención
    2.6. Comandos de test, son comandos para pruebas unitarias, se puede ignorar en principio y crearlos posteriormente
    2.7. Repositorio git, se puede agregar en este punto, pero si ya se había iniciado un repositorio, lo sugerirá por default
    2.8. Palabras clave: es cuestión de SEO
    2.9. Autor: nombre del autor
    2.10. Licencia: sugiere ISC, se puede colocar MIT o cualquier otra
    2.11. Leer el objeto JSON y aceptar
Es posible saltarse todos esos pasos usando el comando: npm init -y y creará el package.json con datos por default.
3. Para instalar las dependencias de nodejs y crear la carpeta node_modules se usa el comando: npm install
4. Para instalar un paquete se usa el comando: npm install <nombre del paquete>
5. Se pueden instalar los paquetes de 3 formas diferentes:
    5.1. Instalación como dependencia (requerido por el proyecto para funcionar):         npm install <nombre del paquete>
    5.2. Instalación para desarrollo (usado para el desarrollo, se ignora en producción): npm install --dev <nombre del paquete>
    5.1. Instalación global (se instala en el ordenador):                                 npm install -g <nombre del paquete>
6. Para eliminar o desinstalar un paquete existen dos formas:
    6.1. Comando: npm uninstall <nombre del paquete>
    6.2. Eliminar manualmente el paquete del archivo package.json y actualizar node_modules. Eliminar la carpeta y reinstalarla
    usando: npm install
7. Guía introductoria: https://nodejs.dev/en/learn/introduction-to-nodejs/

Crear un servidor:
1. Importar el módulo http con o sin predijo node: const http = require('node:http');
2. Crear el servidor: const server = http.createServer();
3. Poner el servidor a la escucha: server.listen();
4. Cada método tiene su configuración respectiva: https://nodejs.dev/en/learn/introduction-to-nodejs/
5. Ejecutar la aplicación con: node app.js y ver la url: http://127.0.0.1:3000/
6. El servidor permanece a la escucha, pero hay que reiniciarlo cada vez que se realiza un cambio
    6.1. Apagar el servidor: ctrl + c
    6.2. Ejecutar la app:    node app.js
    6.3. Ver la url:         http://127.0.0.1:3000/
7. Para optimizar esto se usa un paquete llamado nodemon. https://github.com/remy/nodemon: 
    7.1. Como dependencia:              npm i nodemon
    7.2. Como dependencia de desarrolo: npm install --save-dev nodemon
    7.3. Instalación global:            npm install -g nodemon
    7.4. Luego reemplazar el comando node por el comando nodemon: nodemon app.js
    7.5. Si no se hizo una instalación global, se debe configurar el package.json
        7.5.1. Configurar los scripts: "scripts": {"start": "node app.js", "dev": "nodemon app.js"}
        7.5.2. Luego de configurar los scripts se puede ejecutar: npm run dev y levantará nodemon
8. Instalar express: npm i express
    8.1. Express es un paquete que permite hacer aplicaciones dinámicas y crear un servidor fácilmente
    8.2. Realizar la instalación como dependencia principal
9. Crear middlewares y rutas

Utilizar un motor de plantillas:
1. Express tiene muchos motores de plantillas: https://expressjs.com/en/resources/template-engines.html
2. Se utilizó en este proyecto EJS que es similar a laravel blade: https://ejs.co/
3. Guía para el uso de motores de plantilla con express: https://expressjs.com/en/guide/using-template-engines.html
4. En el servidor se debe establecer el motor de plantillas: app.set('view engine', 'ejs');
5. Para llamar a los assets se puede hacer de diversas formas:
    5.1. Usar los CDN en los template
    5.2. Instalarlos de forma manual
    5.3. Usar npm y compilarlos con webpack y sass respectivamente